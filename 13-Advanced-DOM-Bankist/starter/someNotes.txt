//////////// DOM

- używany do interakcji interakcji JS z przeglądarką
- możemy za pomocą JS tworzyć, modyfikować, usuwać elementy HTML, ustawiać style, klasy i atrybuty, nasłuchiwać i reagować na zdarzenia (eventy).
- drzewo DOM jest generowane z dokumentu HTML, z którym możemy wchodzić w interakcję. drzewo to jest strukturą z nodes
- DOM to bardzo złożony API, zawierający pełno metod i właściwości do interakcji z drzewem DOM np: .querySelector(), .addEventListener(, .createElement(), .innerHTML, .textContent, .children etc.

Node to pojedyńczy węzeł z drzewa DOM.
Każdy node jest reprezentowany w JS przez obiekt. Ten obiekt uzyskuje dostęp do specjalnych metod i właściwości node np. .textContent, .childNodes, .parentNodes, .cloneNode().

Istnieją różne rodzaje nodes (węzłów). Node posiada kilka typów potomnych: element, text, comment, document.
Kiedy w jakimś elemencie znajduje się tekst, wiemy, że dostaje własny node.. Następnie ten element dostaje dostęp do mnóstwa przydatnych właściwości jak .innerHTML, .closest(), .querySelector() etc.

Text -> <p>Paragraph<p>
Comment -> <!--Comment-->

HTMLElement -> HTMLButtonElement / HTMLDivElement..

Zasada jest taka, że wszystko co jest w HTML, trafia do DOM.
Mamy specjalne typy dla przycisków, dla obrazów, linków itd. Każdy z nich ma unikalne właściwości. (np. src w obrazach czy anchor w linkach).

To co stanowi, że wszystko to działa to DZIEDZICZENIE.
Oznacza to, że wszystkie typy potomne otrzymują dostęp do metod i właściwości swoich typów nadrzędnych np. HTMLElement otrzyma dostep do wszystkiego z typy element. Pozatym uzyska dostęp również do wszystkiego z typu węzła, ponieważ to jego typ nadrzędny.

W skrócie: DOM API jest podzielony na różne rodzaje nodes (węzłów). Każdy z tych nodes ma dostęp do różnych właściwości i metod, a niektóre z nich dziedziczą nawet więcej metod i właściwości od swoich przodków w tej organizacji.

Typ Document użwyany jest cały czas do manipulacji, zawiera metody jak: .querySelector(), .createElement(), .getElementById().

.querySelector() jest dostępny w typach element i w document.

Istnieje specjalny typ node - EventTarget, który jest rodzicem zarówno node type, jak i window type (obiekt globalny).
Dzieki niemu (ponieważ dziedziczy się) możemy wywoływać zdarzenia (.add/remove.EventListener) w każdym typie node w DOM API. NIGDY GO NIE TWORZYMY.

//////////////////////////////

element.insertAdjacentHTML(position, text); 
(<!-- beforebegin -->
<p>
  <!-- afterbegin -->
  foo
  <!-- beforeend -->
</p>
<!-- afterend -->)

Różnica między element.textContent a element.innerHTML jest taka, że textContent wstrzyknie nam sam tekst, a innerHTML zbuduje np przycisk jak w przykładzie.

header.prepend(message);
header.append(message); -> pierw wstawiono element na początek, a potem go przeniesio na koniec, dlatego pojawia się tylko raz (nie wstawiono go ponownie).
Możemy więc używać metod prepend i append do wstawiania jak i przenoszenie elementów.

specjalny zestaw zaczynający są od data-(co chcemy).
potem jak wywołujemy to to piszemy dataset.(co chcemy w camel case) np. data-number-version - x.dataset.numberVersion.
Te specjalne atrybuty są przechowywane w obiekcie dataset

/////////////////////
getBoundingClientRect() jest relatywne do widocznego obszaru roboczego. Czyli, podaje koordy w zależności jak mamy wyscrollowany ekran (w jakim położeniu jest dany element)

console.log('Current (X/Y)', window.pageXOffset, window.pageYOffset); wskazuje biężące przewijanie, jak bardzo odsunieci jesteśmy od góry strony

console.log(
    'height/width viewport',
    document.documentElement.clientHeight,
    document.documentElement.clientWidth
  ); wskazuje na wielkość otwartego okna 

  //////////
  Event (zdarzenie) jest to sygnał generowany przez pewny DOM node, a sygnał oznacza, że coś sie stało - kliknięcie, najechanie itd. wszystko co się dzieje na naszej stronie generuje zdarzenie. 
  Możemy to zdarzenie wymienić w kodzie za pomocą event listerenrów (detektorów zdarzeń), aby je obsłużyć jeśli chcemy.