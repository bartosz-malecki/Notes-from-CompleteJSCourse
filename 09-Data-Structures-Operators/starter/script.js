'use strict';

const weekdays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
const openingHours = {
  [weekdays[3]]: {
    open: 12,
    close: 22,
  },
  [weekdays[4]]: {
    open: 11,
    close: 23,
  },
  [weekdays[5]]: {
    open: 0, // Open 24 hours
    close: 24,
  },
};

const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],

  // ES6 enhanced object literals
  openingHours,

  order(starterIndex, mainIndex) {
    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
  },

  orderDelivery({ starterIndex = 1, mainIndex = 0, time = '20:00', address }) {
    console.log(
      `Order received! ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} will be delivered to ${address} at ${time}`
    );
  },

  orderPasta(ing1, ing2, ing3) {
    console.log(
      `Here is your declicious pasta with ${ing1}, ${ing2} and ${ing3}`
    );
  },

  orderPizza(mainIngredient, ...otherIngredients) {
    console.log(mainIngredient);
    console.log(otherIngredients);
  },
};
const getCode = str => str.toUpperCase().slice(0, 3);

const flights =
  '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';

for (const flight of flights.split('+')) {
  const [type, from, to, time] = flight.split(';');
  const output = `${type.startsWith('_Delayed') ? 'üî¥' : ''} ${type.replaceAll(
    '_',
    ' '
  )} from ${getCode(from)} to ${getCode(to)} (${time.replace(
    ':',
    'h'
  )})`.padStart(45);
  console.log(output);
}
///////////////////////////////////////
// Coding Challenge #4

/* 
Write a program that receives a list of variable names written in underscore_case and convert them to camelCase.

The input will come from a textarea inserted into the DOM (see code below), and conversion will happen when the button is pressed.

THIS TEST DATA (pasted to textarea)
underscore_case
 first_name
Some_Variable 
  calculate_AGE
delayed_departure

SHOULD PRODUCE THIS OUTPUT (5 separate console.log outputs)
underscoreCase      ‚úÖ
firstName           ‚úÖ‚úÖ
someVariable        ‚úÖ‚úÖ‚úÖ
calculateAge        ‚úÖ‚úÖ‚úÖ‚úÖ
delayedDeparture    ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ

HINT 1: Remember which character defines a new line in the textarea üòâ
HINT 2: The solution only needs to work for a variable made out of 2 words, like a_b
HINT 3: Start without worrying about the ‚úÖ. Tackle that only after you have the variable name conversion working üòâ
HINT 4: This challenge is difficult on purpose, so start watching the solution in case you're stuck. Then pause and continue!

Afterwards, test with your own test data!

GOOD LUCK üòÄ

document.body.append(document.createElement('textarea'));
document.body.append(document.createElement('button'));

document.querySelector('button').addEventListener('click', function () {
  const text = document.querySelector('textarea').value;
  const rows = text.split('\n');
  for (const [i, row] of rows.entries()) {
    const [first, second] = row.toLowerCase().trim().split('_');
    const output = `${first}${second.replace(
      second[0],
      second[0].toUpperCase()
    )}`;
    console.log(`${output.padEnd(20)}${'‚úÖ'.repeat(i + 1)}`);
  }
});

*/

/*
underscore_case
 first_name
Some_Variable 
  calculate_AGE
delayed_departure
///////////////////////////////////////
// Working with strings 2

// Split and join
console.log('a+very+nice+string'.split('+')); // dzieli ciƒÖg na wiele czƒô≈õci na podstawie ciƒÖgu dzielƒÖcego. Daje nam to tablice z elementami ciƒÖgu
// Powrzechne jest wykorzystywanie tego do tworzenia zmiennych.
console.log('Bartosz Ma≈Çecki'.split(' '));

const [firstName, lastName] = 'Bartosz Ma≈Çecki'.split(' ');

const newName = ['Mr.', firstName, lastName.toUpperCase()].join(' '); // dodaje ciƒÖg rozdzielajƒÖcy. Tutaj tworzy jeden ciƒÖg z≈Ço≈ºony z element√≥w tablicy po≈ÇƒÖczony razem przez spacje z join
console.log(newName);

const capitalizeName = name => {
  const names = name.split(' ');
  const namesUpper = [];
  for (const n of names) {
    // namesUpper.push(n[0].toUpperCase() + n.slice(1)); // spos√≥b 1
    namesUpper.push(n.replace(n[0], n[0].toUpperCase())); // spos√≥b 2
  }
  console.log(namesUpper.join(' '));
};

capitalizeName('jessica ann smith davis');
capitalizeName('bartosz ma≈Çecki');

// Padding
const message = 'Go to gate 23!';
console.log(message.padStart(20, '+').padEnd(30, '+')); // dodaje znaki prz√≥d/ty≈Ç w zale≈ºno≈õci jakƒÖ d≈Çugo≈õƒá ciƒÖg√≥w chcemy

const maskCreditCard = number => {
  const str = number + ''; // gdy ≈ÇƒÖczymy number ze stringiem dostajemy string
  const last = str.slice(-4);
  return last.padStart(str.length, '*'); // ods≈Çaniamy 4 ostatnie cyfry i maskujemy wczesniejsze
};

console.log(maskCreditCard(7437438943289324));
console.log(maskCreditCard(743741222));
console.log(maskCreditCard('74374165433'));

// Repeat
const message2 = 'Bad weather... All departures delayed.. ';
console.log(message2.repeat(4));

const planesInLine = n => {
  console.log(`There is ${n} planes in line ${'‚úàÔ∏è'.repeat(n)}`);
};
planesInLine(5);
planesInLine(3);
planesInLine(9);
*/
/*
///////////////////////////////////////
// Working with strings

const airlane = 'TAP Air Portugal';
const plane = 'A320';

// wydobycie znaku na okre≈õlonej pozycji
console.log(airlane[5]);
console.log('B737'[0]);

// d≈Çugo≈õƒá ciƒÖg√≥w
console.log(airlane.length);
console.log('B737'.length);

// szukanie indeksu znaku
console.log(airlane.indexOf('r')); // pierwsze wystƒÖpienie
console.log(airlane.lastIndexOf('r')); // ostatnie wystƒÖpienie
console.log(airlane.indexOf('Portugal'));

// wyodrƒôbnianie czƒô≈õci ciƒÖg√≥w
console.log(airlane.slice(4)); // parametr poczƒÖtkowy. nie zmienia podstawowego ciƒÖgu. Aby go uzyƒá, musimy zapisac w zmiennej.
console.log(airlane.slice(4, 7)); // parametr ko≈Ñcowy, nie zawiera siƒô w ciƒÖgu, ko≈Ñczy wyodrƒôbniaƒá przed jego osiƒÖgniƒôciem. D≈Çugo≈õƒá ciƒÖgu = ko≈Ñcowy - poczƒÖtkowy

// Wszystkie metody zwracajƒÖ nowe ciƒÖgi.

// Aby wyodrƒôbniƒá pierwsze s≈Çowo
console.log(airlane.slice(0, airlane.indexOf(' ')));
// Aby wyodrƒôbniƒá ostatnie s≈Çowo
console.log(airlane.slice(airlane.lastIndexOf(' ') + 1)); // ≈Çapie spacjƒô wiƒôc trzeba daƒá +1

console.log(airlane.slice(1, -1));

const checkMiddleSeat = seat => {
  // B and E are middle seats
  const s = seat.slice(-1);
  if (s === 'B' || s === 'E') console.log('You got middle seat');
  else console.log('You got lucky');
};
checkMiddleSeat('11B');
checkMiddleSeat('23C');
checkMiddleSeat('3E');

// Istnieje mo≈ºliwo≈õc wykorzystywania metod na ciƒÖgach z tego wzglƒôdu, ≈ºe JS konwertuje ciƒÖg na obiekt
console.log(typeof new String('Bartek'));

// Naprawa wielkich liter (kapitalizacja)
const passenger = 'baRTosZ';
const passengerLower = passenger.toLowerCase();
const passengerCorrect =
  passengerLower[0].toUpperCase() + passengerLower.slice(1);
console.log(passengerCorrect);

const capitalize = name => {
  const nameLower = name.toLowerCase();
  const nameCorrect = nameLower[0].toUpperCase() + nameLower.slice(1);
  return nameCorrect;
};
console.log(capitalize('baRtOSZ'));

// sprawdzanie email
const email = 'hello@jonas.io';
const loginEmail = '   Hello@Jonas.Io  \n';

const normalizedEmail = loginEmail.toLowerCase().trim();
console.log(normalizedEmail);

// replacing
const priceGB = '288,97≈Å';
const priceUS = priceGB.replace('≈Å', '$').replace(',', '.');
console.log(priceUS);

const annoucement =
  'All passengers come to boarding door 23. Boarding door 23!';
// console.log(annoucement.replace(/door/g, 'gate'));
console.log(annoucement.replaceAll('door', 'gate'));

// Booleans
const plane1 = 'Airbus A320neo';
console.log(plane1.includes('A320'));
console.log(plane1.startsWith('Air'));

if (plane1.startsWith('Airbus') && plane1.endsWith('neo'))
  console.log('Part of the NEW airbus family');

// Praktyczny przyk≈Çad
const checkBaggage = function (items) {
  const baggage = items.toLowerCase();
  if (baggage.includes('knife') || baggage.includes('gun'))
    console.log('You are NOT allowed on board');
  else {
    console.log('Welcome aboard');
  }
};
checkBaggage('I have a laptop, some Food and a pocket Knife');
checkBaggage('Socks and camera');
checkBaggage('Got some snacks and a gun for protection');
*/
///////////////////////////////////////
// Coding Challenge #3

/* 
Let's continue with our football betting app! This time, we have a map with a log of the events that happened during the game. The values are the events themselves, and the keys are the minutes in which each event happened (a football game has 90 minutes plus some extra time).

1. Create an array 'events' of the different game events that happened (no duplicates)
2. After the game has finished, is was found that the yellow card from minute 64 was unfair. So remove this event from the game events log.
3. Print the following string to the console: "An event happened, on average, every 9 minutes" (keep in mind that a game has 90 minutes)
4. Loop over the events and log them to the console, marking whether it's in the first half or second half (after 45 min) of the game, like this:
      [FIRST HALF] 17: ‚öΩÔ∏è GOAL

GOOD LUCK üòÄ
*/

const gameEvents = new Map([
  [17, '‚öΩÔ∏è GOAL'],
  [36, 'üîÅ Substitution'],
  [47, '‚öΩÔ∏è GOAL'],
  [61, 'üîÅ Substitution'],
  [64, 'üî∂ Yellow card'],
  [69, 'üî¥ Red card'],
  [70, 'üîÅ Substitution'],
  [72, 'üîÅ Substitution'],
  [76, '‚öΩÔ∏è GOAL'],
  [80, '‚öΩÔ∏è GOAL'],
  [92, 'üî∂ Yellow card'],
]);

/*
// 1;
const events = [...new Set(gameEvents.values())];
console.log(events);

// 2;
gameEvents.delete(64);

// 3;
const time = [...gameEvents.keys()].pop();
console.log(
  `An event happened, on average, every ${time / gameEvents.size} minutes`
);
4;
for (const [min, event] of gameEvents) {
  const half = min < 45 ? 'FIRST' : 'SECOND';
  console.log(`[${half} HALF] ${min}: ${event}`);
}


////////////
// Struktury danych: podsumowanie

// Gdy potrzebujemy prostych list warto≈õci, bez ich opisywania: tablice i sety.
// Gdy potrzbujemy przechowywaƒá warto≈õci w kolejnosci, gdy mogƒÖ zawieraƒá duplikaty oraz gdy zamierzamy manipulowaƒá danymi - tablice.
// Gdy potrzebujemy unkikalnych warto≈õci, lepsza wydajno≈õƒá, usuwanie duplikat√≥w z tablicy - sety.

// Gdy potrzebujemy opisywaƒá warto≈õci za pomocƒÖ kluczy - obiekty i mapy.
// Gdy potzebujemy po prostu odwzorowaƒá klucze na warto≈õci oraz gdy te klucze nie sƒÖ tylko ciƒÖgami - mapy.
// Gdy potrzebujemy funkcji(metod) jako warto≈õci, u≈ºyƒá this, do pracy z JSON - obiekty.

/*
////////////////////// MAPS
// Mapa jest to struktura danych, kt√≥rej mo≈ºemy u≈ºyƒá do odworowania warto≈õci na klucze. R√≥≈ºnica miƒôdzy mapami a obiektami jest taka, ≈ºe w mapach klucze mogƒÖ mieƒá dowolny typ (w obiektach zawsze stringi).
// Sposobem tworzenia nowej mapy jest utworzenie pustej.

const rest = new Map();
// nastƒôpnie dodajemy elementy (podobne do ADD w setach):
rest.set('name', 'Classico Italiano');
rest.set(1, 'Firenze, Italy');
rest.set(2, 'Lisbon, Portugal');
// wywo≈Çanie metody set zwraca nam zaktualizowanƒÖ mapƒô
rest
  .set('categories', ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'])
  .set('open', 11)
  .set('close', 23)
  .set(true, 'We are open')
  .set(false, 'We are closed');

// by odczytaƒá dane z mapy u≈ºywamy metody GET:
console.log(rest.get('name'));
console.log(rest.get(true));

// Przyk≈Çad
const time = 8;
console.log(rest.get(time > rest.get('open') && time < rest.get('close')));

// piszƒÖc nowƒÖ mapƒô bezposrednio z kodu, lepiej robic to w ten sposob. Gdy dodajemy nowe elementy programowo za pomocƒÖ kodu, wtedy metoda set siƒô sprawdza
const question = new Map([
  ['question', 'What is the best programming language in the world?'],
  [1, 'C'],
  [2, 'Java'],
  [3, 'JavaScript'],
  ['correct', 3],
  [true, 'Correct!'],
  [false, 'Try again'],
]);
console.log(question);

// Taka tablica tablic wyglƒÖda jak Object.entries() wiƒôc istnieje ≈Çatwy spos√≥b na konwersjƒô obiekt√≥w na mapy:
console.log(Object.entries(openingHours));
const hoursMap = new Map(Object.entries(openingHours));
console.log(hoursMap);

// Quiz app (iterowanie)
console.log(question.get('question'));

for (const [key, value] of question) {
  if (typeof key === 'number') console.log(`Answer ${key}: ${value}`);
}
// const answer = Number(prompt('Your answer'));
const answer = 3;
console.log(question.get(question.get('correct') === answer));

// Convert map to array
console.log([...question]);
console.log([...question.keys()]);
console.log([...question.values()]);
//////////////////////////////////////////
*/

/*
//////////////////////////////// SETS
// Sety sƒÖ to zbiory unikatowych warto≈õci (nie ma duplikat√≥w).
// Sety sƒÖ bardzo podobne do tablic, nie majƒÖ par klucz-warto≈õc oraz sƒÖ iterowalne. Jednak r√≥zniƒÖ siƒô tym, ≈ºe elementy setu sƒÖ unikalne (duplikaty nie sƒÖ brane pod uwagƒô), oraz kolejno≈õc element√≥w nie ma ≈ºadnego znaczenia.

const orderSet = new Set([
  'Pasta',
  'Pizza',
  'Pizza',
  'Risotto',
  'Pasta',
  'Pizza',
]);



// // stringi sƒÖ r√≥wnie≈º iterowalne
// console.log(new Set('Bartosz'));
// // MogƒÖ byƒá te≈º puste
// console.log(new Set());

// Mo≈ºemy uzyskaƒá wielko≈õc setu
console.log(orderSet.size); // w tym przyk≈Çadzie kucharz bƒôdzie wiedzia≈Ç ile r√≥≈ºnych da≈Ñ bƒôdzie musia≈Ç przygotowaƒá

// Sprawdzenie czy dany element jest w secie (co≈õ jak include w tablicach)
console.log(orderSet.has('Pizza'));

// Dodawanie nowych warto≈õci
orderSet.add('Garlic Bread');
orderSet.add('Garlic Bread');

// Usuwanie warto≈õci
orderSet.delete('Risotto');
// orderSet.clear(); // czy≈õci ca≈Çy set
console.log(orderSet);

// Nie ma sensu pobieraƒá danych z setu, poniewa≈º indeksy i kolejno≈õc nie ma znaczenia. To co musimy wiedzieƒá to czy dana warto≈õƒá jest w secie.
// Je≈ºeli potrzebujemy przechowywaƒá warto≈õci w kolejno≈õci i je pobieraƒá, po to sƒÖ tablice.

// iterowanie
for (const order of orderSet) console.log(order);

// Praktyczny przyk≈Çad
// Chcemy dostac tablice r√≥znych zawod√≥w w tej restauracji
const staff = ['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter'];
const staffUnique = [...new Set(staff)];
console.log(staffUnique);
// Je≈ºeli bysmy chcieli tylko sprawdzic jaka jest ilo≈õc r√≥znych pozycji wystarczy (bez potrzeby tworzenia tablicy):
console.log(
  new Set(['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter']).size
);

// Podsumowanie
Gdy potrzebujemy uporzƒÖtkowaƒá warto≈õci kt√≥re mogƒÖ zawieraƒá duplikaty u≈ºywamy tablic. Sety majƒÖ przydatnƒÖ w≈Ça≈õciwo≈õƒá, ≈ºe sƒÖ unikalne i ≈Çatwo jest dzia≈Çaƒá z nimi, u≈ºywajƒÖƒá wszystkich prostych metod.
//////////////////////////////
*/

/////////////////////////////////////
// Coding Challenge #2
const game = {
  team1: 'Bayern Munich',
  team2: 'Borrussia Dortmund',
  players: [
    [
      'Neuer',
      'Pavard',
      'Martinez',
      'Alaba',
      'Davies',
      'Kimmich',
      'Goretzka',
      'Coman',
      'Muller',
      'Gnarby',
      'Lewandowski',
    ],
    [
      'Burki',
      'Schulz',
      'Hummels',
      'Akanji',
      'Hakimi',
      'Weigl',
      'Witsel',
      'Hazard',
      'Brandt',
      'Sancho',
      'Gotze',
    ],
  ],
  score: '4:0',
  scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],
  date: 'Nov 9th, 2037',
  odds: {
    team1: 1.33,
    x: 3.25,
    team2: 6.5,
  },
};

// 1.
// for (const [i, scorer] of game.scored.entries()) {
//   console.log(`Goal ${i + 1}: ${scorer}`);
// }

// 2.
// const values = Object.values(game.odds);

// let sum = 0;
// for (const i of values) {
//   sum += i;
// }

// let average = sum / 3;
// console.log(average);

// 3.
// for (const [team, odd] of Object.entries(game.odds)) {
//   const teamStr = team === 'x' ? 'draw' : `victory ${game[team]}`;
//   console.log(`Odds of ${teamStr}: ${odd}`);
// }

// bonus
// const scorers = {};
// for (const player of game.scored) {
//   scorers[player] ? scorers[player]++ : (scorers[player] = 1);
// }
// console.log(scorers);

/* 
Let's continue with our football betting app!

1. Loop over the game.scored array and print each player name to the console, along with the goal number (Example: "Goal 1: Lewandowski")
2. Use a loop to calculate the average odd and log it to the console (We already studied how to calculate averages, you can go check if you don't remember)
3. Print the 3 odds to the console, but in a nice formatted way, exaclty like this:
      Odd of victory Bayern Munich: 1.33
      Odd of draw: 3.25
      Odd of victory Borrussia Dortmund: 6.5
Get the team names directly from the game object, don't hardcode them (except for "draw"). HINT: Note how the odds and the game objects have the same property names üòâ

BONUS: Create an object called 'scorers' which contains the names of the players who scored as properties, and the number of goals as the value. In this game, it will look like this:
      {
        Gnarby: 1,
        Hummels: 1,
        Lewandowski: 2
      }

GOOD LUCK üòÄ

// Coding Challenge #1

/* 
We're building a football betting app (soccer for my American friends üòÖ)!

Suppose we get data from a web service about a certain game (below). In this challenge we're gonna work with the data. So here are your tasks:

1. Create one player array for each team (variables 'players1' and 'players2')
2. The first player in any player array is the goalkeeper and the others are field players. For Bayern Munich (team 1) create one variable ('gk') with the goalkeeper's name, and one array ('fieldPlayers') with all the remaining 10 field players
3. Create an array 'allPlayers' containing all players of both teams (22 players)
4. During the game, Bayern Munich (team 1) used 3 substitute players. So create a new array ('players1Final') containing all the original team1 players plus 'Thiago', 'Coutinho' and 'Perisic'
5. Based on the game.odds object, create one variable for each odd (called 'team1', 'draw' and 'team2')
6. Write a function ('printGoals') that receives an arbitrary number of player names (NOT an array) and prints each of them to the console, along with the number of goals that were scored in total (number of player names passed in)
7. The team with the lower odd is more likely to win. Print to the console which team is more likely to win, WITHOUT using an if/else statement or the ternary operator.

TEST DATA FOR 6: Use players 'Davies', 'Muller', 'Lewandowski' and 'Kimmich'. Then, call the function again with players from game.scored

GOOD LUCK üòÄ

*/
// 1)
// const [players1, players2] = game.players;
// console.log(players1, players2);

// 2)
// const [gk, ...fieldPlayers] = players1;
// console.log(gk, fieldPlayers);

// 3)
// const allPlayers = [...players1, ...players2];
// console.log(allPlayers);

// 4)
// const players1Final = [...players1, 'Thiago', 'Coutinho', 'Perisic'];
// console.log(players1Final);

// 5)
// const {
//   odds: { team1, x: draw, team2 },
// } = game;
// console.log(game.odds);
// console.log(team1, draw, team2);

// 6)
// const printGoals = (...players) => {
//   console.log(players);
//   console.log(`${players.length} goals were scored`);
// };
// printGoals('Davies', 'Muller', 'Lewandowski', 'Kimmich');
// printGoals(...game.scored);

// 7)
// team1 < team2 && console.log('Team1 is more likely to win');
// team1 > team2 && console.log('Team2 is more likely to win');
/*

///////////////////////////////////////
// Looping Objects: Object Keys, Values, and Entries

// Property NAMES
const properties = Object.keys(openingHours);
console.log(properties);

let openStr = `We are open on ${properties.length} days: `;
for (const day of properties) {
  openStr += `${day}, `;
}
console.log(openStr);

// Property VALUES
const values = Object.values(openingHours);
console.log(values);

// Entire object
const entries = Object.entries(openingHours);
// console.log(entries);

// [key, value]
for (const [day, { open, close }] of entries) {
  console.log(`On ${day} we open at ${open} and close at ${close}`);
}
//////////////////////////

///////////////////////////
// Operator ≈ÇƒÖczƒÖcy sprawdza czy warto≈õƒá po jego lewej stronie istnieje
// Example
const days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

// je≈ºeli open nie wystƒôpuje dostaniemy b≈ÇƒÖd. ?. daje nam undefined.
for (const day of days) {
  const open = restaurant.openingHours[day]?.open ?? 'closed';
  console.log(`On ${day} we open at ${open}`);
}
// operator ≈ÇƒÖczƒÖcy ?. oraz operator koalesencji ?? powinny byƒá u≈ºywane razem

// Methods
console.log(restaurant.order?.(0, 1) ?? 'Method does not exist');

// Arrays
const users = [{ name: 'Jonas', email: 'hello@jonas.io' }];

console.log(users[0]?.name ?? 'User array empty');
//////////////////////////////




// The Nullish Coalescing Operator
restaurant.numGuests = 0;
const guests = restaurant.numGuests || 10;
console.log(guests);

// Nullish: null and undefined (NOT 0 or ''), 0 i '' sƒÖ dla niego prawdziwymi warto≈õciami
const guestCorrect = restaurant.numGuests ?? 10;
console.log(guestCorrect);
*/

/*
console.log('---- OR ----');
// Use ANY data type, return ANY data type, short-circuiting
// Zwr√≥ci pierwsza warto≈õƒá prawdziwƒÖ albo ostatniƒÖ fa≈ÇszywƒÖ gdy wszystkie takie sƒÖ.
console.log(3 || 'Jonas');
console.log('' || 'Jonas');
console.log(true || 0);
console.log(undefined || null);

console.log(undefined || 0 || '' || 'Hello' || 23 || null);

restaurant.numGuests = 0;
const guests1 = restaurant.numGuests ? restaurant.numGuests : 10;
console.log(guests1);

const guests2 = restaurant.numGuests || 10;
console.log(guests2);

console.log('---- AND ----');
// Zwr√≥ci pierwsza warto≈õc fa≈ÇszywƒÖ albo ostatniƒÖ prawdziwƒÖ gdy wszystkie takie sƒÖ
console.log(0 && 'Jonas');
console.log(7 && 'Jonas');

console.log('Hello' && 23 && null && 'jonas');

// Practical example
if (restaurant.orderPizza) {
  restaurant.orderPizza('mushrooms', 'spinach');
}

restaurant.orderPizza && restaurant.orderPizza('mushrooms', 'spinach');
*/
